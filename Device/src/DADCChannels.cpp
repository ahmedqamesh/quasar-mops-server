/*  Â© Copyright CERN, 2015. All rights not expressly granted are reserved.

 The stub of this file was generated by Quasar (additional info: using transform designToDeviceBody.xslt)
 on 2020-05-06T13:02:27.638+02:00

 Quasar is free software: you can redistribute it and/or modify
 it under the terms of the GNU Lesser General Public Licence as published by
 the Free Software Foundation, either version 3 of the Licence.
 Quasar is distributed in the hope that it will be useful,
 but WITHOUT ANY WARRANTY; without even the implied warranty of
 MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 GNU Lesser General Public Licence for more details.

 You should have received a copy of the GNU Lesser General Public License
 along with Quasar.  If not, see <http://www.gnu.org/licenses/>.



 */

#include <Configuration.hxx>

#include <DADCChannels.h>
#include <ASADCChannels.h>
#include "CanWrapper.h"

namespace Device {

// 1111111111111111111111111111111111111111111111111111111111111111111111111
// 1     GENERATED CODE STARTS HERE AND FINISHES AT SECTION 2              1
// 1     Users don't modify this code!!!!                                  1
// 1     If you modify this code you may start a fire or a flood somewhere,1
// 1     and some human being may possible cease to exist. You don't want  1
// 1     to be charged with that!                                          1
// 1111111111111111111111111111111111111111111111111111111111111111111111111

// 2222222222222222222222222222222222222222222222222222222222222222222222222
// 2     SEMI CUSTOM CODE STARTS HERE AND FINISHES AT SECTION 3            2
// 2     (code for which only stubs were generated automatically)          2
// 2     You should add the implementation but dont alter the headers      2
// 2     (apart from constructor, in which you should complete initializati2
// 2     on list)                                                          2
// 2222222222222222222222222222222222222222222222222222222222222222222222222

/* sample ctr */
DADCChannels::DADCChannels(const Configuration::ADCChannels & config,
		Parent_DADCChannels * parent) :
		Base_DADCChannels(config, parent)
/* fill up constructor initialization list here */
{
	/* fill up constructor body here */
}

/* sample dtr */
DADCChannels::~DADCChannels() {
}

/* delegators for cachevariables and externalvariables */

// 3333333333333333333333333333333333333333333333333333333333333333333333333
// 3     FULLY CUSTOM CODE STARTS HERE                                     3
// 3     Below you put bodies for custom methods defined for this class.   3
// 3     You can do whatever you want, but please be decent.               3
// 3333333333333333333333333333333333333333333333333333333333333333333333333
void DADCChannels::updateAdcChannels(int nodeId, struct timeval timeout,
		int dlc) {
	int channel_index = 0x2400;
	bool numberOfEntries = false;
	numberOfEntries = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 0,
			timeout, dlc);
	if (numberOfEntries) {
		int numberOfEntries_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setNumberOfEntries(numberOfEntries_value,
				OpcUa_Good);
	}
	bool ch3 = false;
	ch3 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 1, timeout,
			dlc);
	if (ch3) {
		int ch3_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh3(ch3_value, OpcUa_Good);
	}

	bool ch4 = false;
	ch4 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 2, timeout,
			dlc);
	if (ch4) {
		int ch4_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh4(ch4_value, OpcUa_Good);
	}

	bool ch5 = false;
	ch5 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 3, timeout,
			dlc);
	if (ch5) {
		int ch5_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh5(ch5_value, OpcUa_Good);
	}

	bool ch6 = false;
	ch6 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 4, timeout,
			dlc);
	if (ch6) {
		int ch6_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh6(ch6_value, OpcUa_Good);
	}

	bool ch7 = false;
	ch7 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 5, timeout,
			dlc);
	if (ch7) {
		int ch7_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh7(ch7_value, OpcUa_Good);
	}

	bool ch8 = false;
	ch8 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 6, timeout,
			dlc);
	if (ch8) {
		int ch8_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh8(ch8_value, OpcUa_Good);
	}

	bool ch9 = false;
	ch9 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 7, timeout,
			dlc);
	if (ch9) {
		int ch9_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh9(ch9_value, OpcUa_Good);
	}

	bool ch10 = false;
	ch10 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 8, timeout,
			dlc);
	if (ch10) {
		int ch10_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh10(ch10_value, OpcUa_Good);
	}

	bool ch11 = false;
	ch11 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 9, timeout,
			dlc);
	if (ch11) {
		int ch11_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh11(ch11_value, OpcUa_Good);
	}

	bool ch12 = false;
	ch12 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 10, timeout,
			dlc);
	if (ch12) {
		int ch12_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh12(ch12_value, OpcUa_Good);
	}

	bool ch13 = false;
	ch13 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 11, timeout,
			dlc);
	if (ch13) {
		int ch13_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh13(ch13_value, OpcUa_Good);
	}
	bool ch14 = false;
	ch14 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 12, timeout,
			dlc);
	if (ch14) {
		int ch14_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh14(ch14_value, OpcUa_Good);
	}

	bool ch15 = false;
	ch15 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 13, timeout,
			dlc);
	if (ch15) {
		int ch15_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh15(ch15_value, OpcUa_Good);
	}
	bool ch16 = false;
	ch16 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 14, timeout,
			dlc);
	if (ch16) {
		int ch16_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh16(ch16_value, OpcUa_Good);
	}

	bool ch17 = false;
	ch17 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 15, timeout,
			dlc);
	if (ch17) {
		int ch17_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh17(ch17_value, OpcUa_Good);
	}
	bool ch18 = false;
	ch18 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 16, timeout,
			dlc);
	if (ch18) {
		int ch18_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh18(ch18_value, OpcUa_Good);
	}
	bool ch19 = false;
	ch19 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 17, timeout,
			dlc);
	if (ch19) {
		int ch19_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh19(ch19_value, OpcUa_Good);
	}
	bool ch20 = false;
	ch20 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 18, timeout,
			dlc);
	if (ch20) {
		int ch20_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh20(ch20_value, OpcUa_Good);
	}
	bool ch21 = false;
	ch21 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 19, timeout,
			dlc);
	if (ch21) {
		int ch21_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh21(ch21_value, OpcUa_Good);
	}

	bool ch22 = false;
	ch22 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 20, timeout,
			dlc);
	if (ch22) {
		int ch22_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh22(ch22_value, OpcUa_Good);
	}
	bool ch23 = false;
	ch23 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 21, timeout,
			dlc);
	if (ch23) {
		int ch23_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh23(ch23_value, OpcUa_Good);
	}
	bool ch24 = false;
	ch24 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 22, timeout,
			dlc);
	if (ch24) {
		int ch24_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh24(ch24_value, OpcUa_Good);
	}
	bool ch25 = false;
	ch25 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 23, timeout,
			dlc);
	if (ch25) {
		int ch25_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh25(ch25_value, OpcUa_Good);
	}
	bool ch26 = false;
	ch26 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 24, timeout,
			dlc);
	if (ch26) {
		int ch26_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh26(ch26_value, OpcUa_Good);
	}
	bool ch27 = false;
	ch27 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 25, timeout,
			dlc);
	if (ch27) {
		int ch27_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh27(ch27_value, OpcUa_Good);
	}
	bool ch28 = false;
	ch28 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 26, timeout,
			dlc);
	if (ch28) {
		int ch28_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh28(ch28_value, OpcUa_Good);
	}
	bool ch29 = false;
	ch29 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 27, timeout,
			dlc);
	if (ch29) {
		int ch29_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh29(ch29_value, OpcUa_Good);
	}
	bool ch30 = false;
	ch30 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 28, timeout,
			dlc);
	if (ch30) {
		int ch30_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh30(ch30_value, OpcUa_Good);
	}
	bool ch31 = false;
	ch31 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 29, timeout,
			dlc);
	if (ch31) {
		int ch31_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh31(ch31_value, OpcUa_Good);
	}
	bool ch32 = false;
	ch32 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 30, timeout,
			dlc);
	if (ch32) {
		int ch32_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh32(ch32_value, OpcUa_Good);
	}
	bool ch33 = false;
	ch33 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 31, timeout,
			dlc);
	if (ch33) {
		int ch33_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh33(ch33_value, OpcUa_Good);
	}
	bool ch34 = false;
	ch34 = CanLibrary::CanWrapper::sdoRead(nodeId, channel_index, 32, timeout,
			dlc);
	if (ch34) {
		int ch34_value = CanLibrary::CanWrapper::getSdoData();
		getAddressSpaceLink()->setCh34(ch34_value, OpcUa_Good);
	}

}

}
